using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO.Ports;
using Modbus.Data;
using Modbus.Device;
using Modbus.Utility;
using System.Net;
using System.Net.Sockets;
using System.Threading;
namespace WindowsForms_WTDS
{
    class Ldms80contorl
    {
        public byte [] SendBufModeAup = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Aup连续测量
        public byte [] SendBufStartAup = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Aup开始测量
        public byte [] SendBufStopAup = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Aup停止测量
        public byte [] CheckAup = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataAup = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Aup获取测量数据
        public byte [] SendBufGetInfoAup = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Aup获取仪器状态

        public byte [] SendBufModeAdown = { 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Adown连续测量
        public byte [] SendBufStartAdown = { 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Adown开始测量
        public byte [] SendBufStopAdown = { 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Adown停止测量
        public byte [] CheckAdown = { 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataAdown = { 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Adown获取测量数据
        public byte [] SendBufGetInfoAdown = { 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Adown获取仪器状态

        public byte [] SendBufModeAleft = { 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Aleft连续测量
        public byte [] SendBufStartAleft = { 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Aleft开始测量
        public byte [] SendBufStopAleft = { 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Aleft停止测量
        public byte [] CheckAleft = { 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataAleft = { 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Aleft获取测量数据
        public byte [] SendBufGetInfoAleft = { 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Aleft获取仪器状态

        public byte [] SendBufModeAright = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Aright连续测量
        public byte [] SendBufStartAright = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Aright开始测量
        public byte [] SendBufStopAright = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Aright停止测量
        public byte [] CheckAright = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataAright = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Aright获取测量数据
        public byte [] SendBufGetInfoAright = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Aright获取仪器状态

        public byte [] SendBufModeBup = { 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Bup连续测量
        public byte [] SendBufStartBup = { 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Bup开始测量
        public byte [] SendBufStopBup = { 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Bup停止测量
        public byte [] CheckBup = { 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataBup = { 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Bup获取测量数据
        public byte [] SendBufGetInfoBup = { 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Bup获取仪器状态

        public byte [] SendBufModeBdown = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Bdown连续测量
        public byte [] SendBufStartBdown = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Bdown开始测量
        public byte [] SendBufStopBdown = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Bdown停止测量
        public byte [] CheckBdown = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataBdown = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Bdown获取测量数据
        public byte [] SendBufGetInfoBdown = { 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Bdown获取仪器状态

        public byte [] SendBufModeBleft = { 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Bleft连续测量
        public byte [] SendBufStartBleft = { 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Bleft开始测量
        public byte [] SendBufStopBleft = { 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Bleft停止测量
        public byte [] CheckBleft = { 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataBleft = { 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Bleft获取测量数据
        public byte [] SendBufGetInfoBleft = { 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Bleft获取仪器状态

        public byte [] SendBufModeBright = { 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x07, 0x00, 0x00 };//Bright连续测量
        public byte [] SendBufStartBright = { 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x01 };//Bright开始测量
        public byte [] SendBufStopBright = { 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x09, 0x00, 0x00 };//Bright停止测量
        public byte [] CheckBright = { 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00 };//指令发送正常
        public byte [] SendBufRecvdataBright = { 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0B, 0x00, 0x03 };//Bright获取测量数据
        public byte [] SendBufGetInfoBright = { 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x0A, 0x00, 0x01 };//Bright获取仪器状态


    }
}
